// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 新增：钱包挑战码模型
model Challenge {
  id            String   @id @default(cuid())
  walletAddress String   // 钱包地址
  challenge     String   // 挑战码
  expiresAt     DateTime // 过期时间
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([walletAddress])
  @@index([expiresAt])
}

enum UserType {
  ARTIST       // 艺术家
  GEEK         // 极客
  STORYTELLER  // 故事家
  MEME_LORD    // 迷因王
  EXPLORER     // 探索者
}

// Sui交易记录模型
model SuiTransaction {
  id          String   @id @default(cuid())
  digest      String   @unique // 交易哈希
  userId      String   // 用户ID
  user        User     @relation(fields: [userId], references: [id])
  postId      String?  // 帖子ID
  post        Post?    @relation("PostTransactions", fields: [postId], references: [id])
  rewardId    String?  // 打赏记录ID
  reward      Reward?  @relation(fields: [rewardId], references: [id])
  bidId       String?  // 竞拍记录ID
  bid         Bid?     @relation(fields: [bidId], references: [id])
  type        String   // 交易类型(register, mint, auction等)
  status      String   // 交易状态(pending, success, failed)
  data        Json?    // 交易相关数据
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([digest])
  @@index([type])
  @@index([status])
  @@index([postId])
  @@index([rewardId])
  @@index([bidId])
}

model User {
  id            String   @id @default(cuid())
  walletAddress String   @unique    // 用户钱包地址
  email         String?  // 用户邮箱（可选）
  userType      UserType? // 用户类型（可选）
  profile       Profile? // 用户资料
  shareCode     String   @unique @default("") // 用户分享码
  posts         Post[]   // 用户发布的帖子
  comments      Comment[] // 用户发表的评论
  likes         Like[]   // 用户点赞的帖子
  followers     Follow[] @relation("Following") // 关注该用户的用户
  following     Follow[] @relation("Follower")  // 该用户关注的用户
  nfts          NFT[]    // 用户拥有的NFT
  referredRewards Reward[] @relation("Referrer") // 作为推荐人的打赏记录
  referredBids   Bid[]    @relation("BidReferrer") // 作为推荐人的竞拍记录
  bids          Bid[]    @relation("BidUser") // 用户的竞拍记录
  winningBids   Bid[]    @relation("Winner") // 用户获胜的竞拍记录
  soldBids      Bid[]    @relation("Creator") // 作为创作者被竞拍的记录
  nftCount      Int      @default(0) // 拥有的NFT数量
  rewardEarnings Float   @default(0) // 获得的打赏总收益（SUI）
  auctionEarnings Float  @default(0) // 获得的竞拍总收益（SUI）
  rewardSpent     Float   @default(0) // 打赏总支出（SUI）
  chainId       String?  // 链上用户ID
  isAdmin       Boolean  @default(false) // 是否是管理员
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lotteryPools     LotteryPool[]     // 作为中奖者的抽奖池
  transactions   SuiTransaction[]    // 用户的Sui交易记录
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  name      String?  // 用户名称
  bio       String?  // 个人简介
  avatar    String?  // 头像URL
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id            String   @id @default(cuid())
  title         String   // 帖子标题
  content       String   // 帖子内容
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  shareCode     String   @unique @default("") // 帖子分享码
  status        PostStatus @default(DRAFT) // 帖子状态
  category      Category? @relation(fields: [categoryId], references: [id])
  categoryId    String?
  tags          Tag[]    @relation("PostToTag")
  comments      Comment[]
  likes         Like[]
  nfts          NFT[]    // 帖子关联的NFT
  chainId       String?  // 链上帖子ID
  contentHash   String?  // 内容哈希
  nftObjectId   String?  // NFT 对象 ID
  audienceCount Int      @default(0) // 观众数量
  totalRewards  Float    @default(0) // 总打赏金额
  postType      PostType @default(NORMAL) // 帖子类型
  rewards       Reward[] // 打赏记录
  walrusImages  WalrusImage[] // 帖子关联的 Walrus 图片
  vercelBlobImages VercelBlobImage[] // 帖子关联的 Vercel Blob 图片
  filebaseImages FilebaseImage[] // 帖子关联的 Filebase IPFS 图片
  allowBidding  Boolean  @default(false) // 是否允许竞拍
  biddingDueDate DateTime? // 竞拍截止日期
  startPrice    Float?    // 起拍价（SUI）
  currentHighestBid Float? // 当前最高竞拍价（SUI）
  bids          Bid[]     @relation("BidPost") // 竞拍记录
  lotteryPool     LotteryPool?     // 当前抽奖池
  auctionRound   Int      @default(1) // 竞拍轮次，从1开始
  transactions   SuiTransaction[] @relation("PostTransactions") // 帖子关联的交易记录
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// 帖子状态枚举
enum PostStatus {
  DRAFT     // 草稿
  PUBLISHED // 已发布
  ARCHIVED  // 已归档
  DELETED   // 已删除
  PENDING   // 待处理
  FAILED    // 失败
}

// 分类模型
model Category {
  id          String   @id @default(cuid())
  name        String   // 分类名称
  description String?  // 分类描述
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// 标签模型
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique // 标签名称
  posts     Post[]   @relation("PostToTag")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 评论模型
model Comment {
  id        String   @id @default(cuid())
  content   String   // 评论内容
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  parentId  String?  // 父评论ID，用于回复功能
  parent    Comment? @relation("CommentToComment", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentToComment")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 点赞模型
model Like {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, userId]) // 确保用户对同一帖子只能点赞一次
}

// 关注模型
model Follow {
  id          String   @id @default(cuid())
  followerId  String   // 关注者ID
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  followingId String   // 被关注者ID
  following   User     @relation("Following", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([followerId, followingId]) // 确保用户不能重复关注同一用户
}

// 帖子类型枚举
enum PostType {
  NORMAL    // 普通帖子
  MEME_LORD // Meme Lord类型
}

// NFT模型
model NFT {
  id        String   @id @default(cuid())
  chainId   String?  // 链上NFT ID
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  metadata  String?  // NFT元数据
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 打赏记录模型
model Reward {
  id            String   @id @default(cuid())
  postId        String
  post          Post     @relation(fields: [postId], references: [id])
  amount        Float    // 打赏金额
  referrerId    String?  // 推荐人ID
  referrer      User?    @relation("Referrer", fields: [referrerId], references: [id])
  lotteryPoolId   String?  // 抽奖池ID
  lotteryPool     LotteryPool? @relation(fields: [lotteryPoolId], references: [id])
  transactions   SuiTransaction[] // 关联的交易记录
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model WalrusImage {
  id         String   @id @default(uuid())
  blobId     String   @unique
  url        String
  expiryDate DateTime
  postId     String?
  post       Post?    @relation(fields: [postId], references: [id])
  createdAt  DateTime @default(now())

  @@index([expiryDate])
  @@index([postId])
}

model VercelBlobImage {
  id         String   @id @default(uuid())
  pathname   String   @unique
  url        String
  postId     String?
  post       Post?    @relation(fields: [postId], references: [id])
  createdAt  DateTime @default(now())

  @@index([postId])
}

model FilebaseImage {
  id         String   @id @default(uuid())
  cid        String   
  url        String
  postId     String?
  post       Post?    @relation(fields: [postId], references: [id])
  createdAt  DateTime @default(now())

  @@index([postId])
}

// 竞拍模型
model Bid {
  id        String   @id @default(cuid())
  amount    Float    // 竞拍金额
  postId    String?  // 可以为空
  post      Post?    @relation("BidPost", fields: [postId], references: [id], map: "BidPost_fkey")
  userId    String
  user      User     @relation("BidUser", fields: [userId], references: [id], map: "BidUser_fkey")
  referrerId String? // 推荐人ID
  referrer   User?   @relation("BidReferrer", fields: [referrerId], references: [id])
  isWinner   Boolean @default(false) // 是否是竞拍获胜者
  lotteryPoolId String? // 抽奖池ID
  lotteryPool   LotteryPool? @relation(fields: [lotteryPoolId], references: [id])
  chainId   String?  // 链上竞拍记录ID
  round     Int      @default(1) // 竞拍轮次
  winner    User?    @relation("Winner", fields: [userId], references: [id], map: "BidWinner_fkey")
  creator   User?    @relation("Creator", fields: [postId], references: [id], map: "BidCreator_fkey")
  transactions SuiTransaction[] // 关联的交易记录
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([userId])
  @@index([referrerId])
  @@index([lotteryPoolId])
  @@index([round])
}

// 抽奖池模型
model LotteryPool {
  id        String   @id @default(cuid())
  postId    String   @unique // 一个帖子只能有一个抽奖池
  post      Post     @relation(fields: [postId], references: [id])
  amount    Float    @default(0) // 奖池金额
  winnerId  String?  // 中奖者ID
  winner    User?    @relation(fields: [winnerId], references: [id])
  bids      Bid[]    // 关联的竞拍记录
  rewards   Reward[] // 关联的打赏记录
  round     Int      @default(1) // 抽奖池轮次
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([winnerId])
  @@index([round])
} 